xml.instruct! :xml, :version=>"1.0", :encoding => "utf-8"
unless @articles
  @articles = Array.new
  @one = true
end
if @article
  @articles[0] = @article
end

xml.feed("xmlns" => "http://www.w3.org/2005/Atom") do
  xml.id 'tag:' + request.host + ':notes:' + @articles.first.id.to_s + ':' + @articles.last.id.to_s

  if @one
    xml.link("type" => "text/html", "rel" => "alternate", "href" => request.protocol + request.host_with_port + url_for(:controller => 'notes', :action => "show_title"), "title" => don_get_config.rdf_title)
  elsif @articles_pages
    xml.link("type" => "text/html", "rel" => "alternate", "href" => request.protocol + request.host_with_port + url_for(:controller => 'notes', :action => "noteslist", :page => @articles_pages.current), "title" => don_get_config.rdf_title)
  else
    xml.link("type" => "text/html", "rel" => "alternate", "href" => request.protocol + request.host_with_port + url_for(:controller => 'notes', :action => "noteslist"), "title" => don_get_config.rdf_title)
  end

  xml.link("type" => "application/atom+xml", "rel" => "service.post", "href" => request.protocol + request.host_with_port + url_for(:action => "post"), "title" => don_get_config.rdf_title)

  xml.link("type" => "application/atom+xml", "rel" => "start", "href" => request.protocol + request.host_with_port + url_for(:action => "feed", :aid => @articles.first.id.to_s), "title" => don_get_config.rdf_title)
  xml.link("type" => "application/atom+xml", "rel" => "prev", "href" => request.protocol + request.host_with_port + url_for(:action => "feed", :aid => @articles.first.id + 1), "title" => don_get_config.rdf_title)
  xml.link("type" => "application/atom+xml", "rel" => "next", "href" => request.protocol + request.host_with_port + url_for(:action => "feed", :aid => @articles.last.id - 1), "title" => don_get_config.rdf_title)

  xml.title don_get_config.rdf_title
  xml.generator "donrails", "url" => "http://code.google.com/p/donrails/"
  xml.updated pub_date(@articles.first.article_mtime) if @articles.first and @articles.first.article_mtime
  xml.tagline don_get_config.rdf_description
  xml.copyright don_get_config.rdf_copyright

  @articles.each do |@article|
    xml.entry do
      article = don_get_object(@article, 'html')
      xml.title article.title_to_html
      xml.link("type" => "text/html",
               "rel" => "alternate", 
               "href" => request.protocol + request.host_with_port + url_for(:action => :show_title, :controller => :notes, :id => article.id))
      xml.link("type" => "application/atom+xml",
               "rel" => "service.edit",
               "href" => request.protocol + request.host_with_port + url_for(:action => "edit", :id => article.id),
               "title" => article.title)
      xml.updated pub_date(article.article_mtime) if article.article_mtime
      xml.issued pub_date(article.article_date)
      xml.id 'tag:' + request.host + ':notes:' + article.id.to_s
      
      article.categories.each do |cat|
        xml.category("scheme" => "http://xmlns.com/wordnet/1.6/", "term" => cat.name, "label" => cat.name)
      end
      xml.trackback request.protocol + request.host_with_port + url_for(:controller => 'notes', :action => 'trackback', :id => article.id)

      xml.content("type" => "text/html",
                  "xml:lang" => "ja",
                  "xml:base" => request.protocol + request.host_with_port + url_for(:action => "edit", :id => article.id)) do
        xml.text! article.body_to_html
      end

      article.pictures.each do |pic|
        tmpurl1 = request.protocol + request.host_with_port + url_for(:action => "show_image", :id => pic.id)
        xml.link("rel"=>'alternate', 'type'=>pic.content_type, 'href'=> tmpurl1)
      end


    end
  end
end
